#include <iostream>
#include <cmath>

bool is_prime(int num) {
    if (num <= 1) {
        return false;
    }
    else if (num == 2) {
        return true;
    }
    for (auto i=2; i <= sqrt(num)+1; i++) {
        if (num % i == 0) {
            return false; 
        }
    }
    return true;
}

int prime_formula1(int n) {
    return (pow(n,2) + n + 41);
}

int prime_formula2(int n) {
    return (pow(n,2) + -79*n + 1601);
}

int general_quadratic(int n, int a, int b) {
    return (pow(n,2) + a*n + b);
}

int main() {

    // Part 1: print the 40 primes generated by formula 1
    for (auto i = 0; i <= 39; i++) {
        std::cout << prime_formula1(i) << " ";
    }
    std::cout << std::endl << std::endl;

    // Part 2: print the 80 primes generated by formula 2
    for (auto i = 0; i <= 79; i++) {
        std::cout << prime_formula2(i) << " ";
    }
    std::cout << std::endl << std::endl;

    // Part 3: find the pair (a,b) such that the general quadratic
    // finds the most consecutive primes
    int a; 
    int b;
    int most_consec_num_primes = 0;
    int temp_consec_num_primes;
    int n;

    for (auto i=-999; i<=999; i++) {
        for (auto j=-1000; j <= 1000; j++) {
            n = 0;
            temp_consec_num_primes = 0;
            
            while (is_prime(general_quadratic(n,i,j))) {
                temp_consec_num_primes++;
                n++;
            }
            
            if (temp_consec_num_primes > most_consec_num_primes) {
                most_consec_num_primes = temp_consec_num_primes;
                a = i;
                b = j;
            }
        }
    }
    std::cout << "(a,b) = " << "(" << a << "," << b << ")" << std::endl;
    std::cout << most_consec_num_primes << " consecutive primes generated" << std::endl;

    return 0;
}




